/*****************************************************************************
*                               System Include Files
*****************************************************************************/

#INCLUDE <16F1947.h>   //Flash programmable device 
#DEVICE WRITE_EEPROM = NOINT
/*****************************************************************************
*                             Pre-processor Directives
*****************************************************************************/ 
#USE DELAY (Clock = 8000000,internal) 	//the value used for the library routines            
#USE FAST_IO(ALL)   //compiler to perform I/O without programming Dir. reg. Port A 	
#FUSES NOWDT,NOPROTECT,INTRC_IO,NOPUT,NOBROWNOUT,DEBUG

/*****************************************************************************
*                               File Includes
*****************************************************************************/

#INCLUDE <LW_Controller_MAIN.h>
#INCLUDE <LW_Controller_user_set_up.h>
#INCLUDE <LW_Controller_Func.h>
#INCLUDE <LW_Controller_Func.c>
#INCLUDE <LW_Controller_States.h>
//#INCLUDE <bootloader.h>			//create Bootloader code is // removed. 

#INCLUDE <LW_Controller_States.c>
#INCLUDE <LW_Controller_RS485.h>
#INCLUDE <LW_Controller_RS485.c>



/*****************************************************************************/

/****************************************************************************
* Function Name: LooWatt Controller_MAIN
* Purpose:
*		MAIN application program. MK 2 version       
* Parameters Passed: 
* Parameters Returned: 
* Globals:
* Date Started 	12/04/2017
* Last Edit/By	
* Version		Not released
****************************************************************************/  
void main (void)
{
	int8 STATE;

	INIT_ALL();
	INIT_ATTENDANT_USART();
	STATE = (read_eeprom(status_addr)) & ~RST_STATE;
	//if no state then it will start in service mode. 

	for( ; ; )
	{
		switch (STATE)
		{
			case RUNNING:
				STATE = run_mode(STATE);
				break;

			case SERVICE:
				STATE = service_mode(STATE);
				break;

			case OO_SERVICE:
				STATE = oo_service_mode(STATE);
				break;

			default:
				STATE = SERVICE;
				break;
		}
	}
}
